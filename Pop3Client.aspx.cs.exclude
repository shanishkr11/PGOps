using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Collections.Generic;
using gmail;
using System.Text.RegularExpressions;
using System.Text;

public partial class Pop3Client : System.Web.UI.Page
{
    public const string Host = "pop.gmail.com";
    public const int Port = 995;
    public string Email;
    public string Password;
    public const int NoOfEmailsPerPage = 20;
    public const string SelfLink = "<a href=\"Pop3Client.aspx?page={0}\">{1}</a>";
    public const string DisplayEmailLink = "<a href=\"DisplayPop3Email.aspx?emailId={0}\">{1}</a>";
    protected static Regex CharsetRegex = new Regex("charset=\"?(?<charset>[^\\s\"]+)\"?", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    protected static Regex QuotedPrintableRegex = new Regex("=(?<hexchars>[0-9a-fA-F]{2,2})", RegexOptions.IgnoreCase | RegexOptions.Compiled);

  
  
    protected static Regex UrlRegex = new Regex("(?<url>https?://[^\\s\"]+)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    protected static Regex FilenameRegex = new Regex("filename=\"?(?<filename>[^\\s\"]+)\"?", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    protected static Regex NameRegex = new Regex("name=\"?(?<filename>[^\\s\"]+)\"?", RegexOptions.IgnoreCase | RegexOptions.Compiled);


    DataTable dt = new DataTable();

    string a = "";

    public void bindgrid()
    {
       /* try
        {

            dt.Columns.Add("SrNO", System.Type.GetType("System.String"));
            dt.Columns.Add("From", System.Type.GetType("System.String"));
            dt.Columns.Add("Subject", System.Type.GetType("System.String"));
            dt.Columns.Add("Body", System.Type.GetType("System.String"));
            dt.Columns.Add("Date", System.Type.GetType("System.String"));

            int page = 1;
            if (Request.QueryString["page"] == null)
            {
             
            }
            else
                page = Convert.ToInt32(Request.QueryString["page"]);
            try
            {
                Email = Session["email"].ToString();
                Password = Session["pwd"].ToString();
            }
            catch (Exception ex)
            {
                Response.Redirect("index.aspx", false);
            }
            int totalEmails;
            List<Email> emails;
            List<MessagePart> msgParts = null;
            string emailAddress;


            using (gmail.Pop3Client client = new gmail.Pop3Client(Host, Port, Email, Password, true))
            {
                emailAddress = client.Email;
                client.Connect();
                totalEmails = client.GetEmailCount();
               // emails = client.FetchEmailList(((page - 1) * NoOfEmailsPerPage) + 1, NoOfEmailsPerPage);



               




                for (int i = 0; i < emails.Count; i++)
                {
                    Email email = emails[i];
                    DataRow dr = dt.NewRow();

                    int emailId = ((page - 1) * NoOfEmailsPerPage) + i + 1;

                    dr[0] = i ;


                    dr[1] = email.From;



                    dr[2] = String.Format(DisplayEmailLink, emailId, email.Subject);

                  
                    if (email.UtcDateTime != DateTime.MinValue)
                        dr[4] = email.UtcDateTime.ToString();



                   
                    if (i > 0)
                    {
                        msgParts = client.FetchMessageParts(i);




                        


                        MessagePart preferredMsgPart = FindMessagePart(msgParts, "text/html");
                        if (preferredMsgPart == null)

                            preferredMsgPart = FindMessagePart(msgParts, "text/plain");
                        else if (preferredMsgPart == null && msgParts.Count > 0)
                            preferredMsgPart = msgParts[0];
                        string contentType, charset, contentTransferEncoding, body = null;
                   
                        if (preferredMsgPart != null)
                        {
                            contentType = preferredMsgPart.Headers["Content-Type"];
                            charset = "us-ascii";
                            contentTransferEncoding = preferredMsgPart.Headers["Content-Transfer-Encoding"];
                            Match m = CharsetRegex.Match(contentType);
                            if (m.Success)
                                charset = m.Groups["charset"].Value;
                       //   a = contentType != null ? "Content-Type: " + contentType + "<br />" : string.Empty;
                  //   a = a + contentTransferEncoding != null ? "Content-Transfer-Encoding: " + contentTransferEncoding : string.Empty;
                            if (contentTransferEncoding != null)
                            {
                                if (contentTransferEncoding.ToLower() == "base64")
                                    body = DecodeBase64String(charset, preferredMsgPart.MessageText);
                                else if (contentTransferEncoding.ToLower() == "quoted-printable")
                                    body = DecodeQuotedPrintableString(preferredMsgPart.MessageText);
                                else
                                    body = preferredMsgPart.MessageText;
                            }
                            else
                                body = preferredMsgPart.MessageText;
                        }

                        dr[3]= preferredMsgPart != null ? (preferredMsgPart.Headers["Content-Type"].IndexOf("text/plain") != -1 ? "<pre>" + FormatUrls(body) + "</pre>" : body) : null;
                        ListAttachments(msgParts);
                       
                    }

                    dt.Rows.Add(dr);  
                }
               
               

            }

            gridEmail.DataSource = dt;
            gridEmail.DataBind();

        }
        catch (Exception ex)
        {
            Response.Write("" + ex.ToString());
        }
        * */
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            bindgrid();
        }
        catch (Exception ex)
        {
            Response.Write("" + ex.ToString());
        }
      


    }
   

    protected Decoder GetDecoder(string charset)
    {
        Decoder decoder;
        switch (charset.ToLower())
        {
            case "utf-7":
                decoder = Encoding.UTF7.GetDecoder();
                break;
            case "utf-8":
                decoder = Encoding.UTF8.GetDecoder();
                break;
            case "us-ascii":
                decoder = Encoding.ASCII.GetDecoder();
                break;
            case "iso-8859-1":
                decoder = Encoding.ASCII.GetDecoder();
                break;
            default:
                decoder = Encoding.ASCII.GetDecoder();
                break;
        }
        return decoder;
    }
    protected string DecodeBase64String(string charset, string encodedString)
    {
        Decoder decoder = GetDecoder(charset);
        byte[] buffer = Convert.FromBase64String(encodedString);
        char[] chararr = new char[decoder.GetCharCount(buffer, 0, buffer.Length)];
        decoder.GetChars(buffer, 0, buffer.Length, chararr, 0);
        return new string(chararr);
    }
    protected string DecodeQuotedPrintableString(string encodedString)
    {
        StringBuilder b = new StringBuilder();
        int startIndx = 0;
        MatchCollection matches = QuotedPrintableRegex.Matches(encodedString);
        for (int i = 0; i < matches.Count; i++)
        {
            Match m = matches[i];
            string hexchars = m.Groups["hexchars"].Value;
            int charcode = Convert.ToInt32(hexchars, 16);
            char c = (char)charcode;
            if (m.Index > 0)
                b.Append(encodedString.Substring(startIndx, (m.Index - startIndx)));
            b.Append(c);
            startIndx = m.Index + 3;
        }
        if (startIndx < encodedString.Length)
            b.Append(encodedString.Substring(startIndx));
        return Regex.Replace(b.ToString(), "=\r\n", "");
    }
    protected void ListAttachments(List<MessagePart> msgParts)
    {
        bool attachmentsFound = false;
        StringBuilder b = new StringBuilder();
        b.Append("<ol>");
        foreach (MessagePart p in msgParts)
        {
            string contentType = p.Headers["Content-Type"];
            string contentDisposition = p.Headers["Content-Disposition"];
            Match m;
            if (contentDisposition != null)
            {
                m = FilenameRegex.Match(contentDisposition);
                if (m.Success)
                {
                    attachmentsFound = true;
                    b.Append("<li>").Append(m.Groups["filename"].Value).Append("</li>");

                }
            }
            else if (contentType != null)
            {
                m = NameRegex.Match(contentType);

                if (m.Success)
                {
                    attachmentsFound = true;
                    b.Append("<li>").Append(m.Groups["filename"].Value).Append("</li>");
                }
            }
        }
        b.Append("</ol>");
        if (attachmentsFound)
           a = a + b.ToString();
  
            
    }
    protected MessagePart FindMessagePart(List<MessagePart> msgParts, string contentType)
    {
        foreach (MessagePart p in msgParts)
            if (p.ContentType != null && p.ContentType.IndexOf(contentType) != -1)
                return p;
        return null;
    }
    protected string FormatUrls(string plainText)
    {
        string replacementLink = "<a href=\"${url}\">${url}</a>";
        return UrlRegex.Replace(plainText, replacementLink);
    }
    
    protected void gridEmail_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gridEmail.PageIndex = e.NewPageIndex;
        bindgrid();
    }
}
